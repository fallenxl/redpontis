---
import Footer from "../components/Footer.astro";
import Navigation from "../components/Navigation.astro";
import "../styles/global.css";
---

<!doctype html>
<html lang="en" class="i18n-pending"> <!-- flag inicial -->
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>RedPontis</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/7.0.0/css/all.min.css"
      integrity="sha512-DxV+EoADOkOygM4IR9yXP8Sb2qwgidEmeqAEmDKIOfPRQZOWbXCzLC6vjbZyy0vPisbH2SyW27+ddLVCN+OMzQ=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />

    <style>
      /* Oculta el contenido hasta que el i18n termine */
      .i18n-pending body #app { visibility: hidden; }
      /* Loader base */
      #rp-loader {
        position: fixed; inset: 0; display: grid; place-items: center;
        background: #ffffff; z-index: 9999; transition: opacity .25s ease;
      }
      #rp-loader .dot {
        width: 10px; height: 10px; border-radius: 9999px; background: #B41A1D;
        animation: bounce 0.9s infinite ease-in-out;
      }
      #rp-loader .dot:nth-child(2){ animation-delay: .15s; background:#575756; }
      #rp-loader .dot:nth-child(3){ animation-delay: .3s;  }
      @keyframes bounce {
        0%, 80%, 100% { transform: scale(0.6); opacity: .5; }
        40% { transform: scale(1); opacity: 1; }
      }
      /* Cuando ya está listo, se desvanece el loader */
      .i18n-ready #rp-loader { opacity: 0; pointer-events: none; }
      /* Tip: evita layout shift en header fijo */
      body { margin:0; width:100%; min-height:100%; }
    </style>
  </head>

  <body>
    <!-- Loader -->
    <div id="rp-loader" aria-live="polite" aria-busy="true">
      <div class="flex items-center gap-2">
        <span class="dot"></span><span class="dot"></span><span class="dot"></span>
      </div>
    </div>

    <!-- Tu App -->
    <div id="app">
      <Navigation />
      <slot />
      <Footer />
    </div>

    <script>
      // ======= i18n (igual al tuyo, con dos mejoras) =======
      type Lang = "es" | "en";
      type Dict = Record<string, any>;
      const STORAGE_KEY = "rp_lang";
      const DEFAULT_LANG: Lang = "es";
      const LOCALES_BASE = "/locale"; // cambia a "/locale" si así está tu carpeta
      let CURRENT_LANG: Lang = DEFAULT_LANG;
      let DICT: Dict = {};

      const flatGet = (obj: any, path: string, fallback?: string) =>
        path.split(".").reduce((acc: any, k) => (acc && acc[k] != null ? acc[k] : undefined), obj)
        ?? fallback ?? path;

      function getSavedLang(): Lang {
        try {
          const v = localStorage.getItem(STORAGE_KEY);
          if (v === "es" || v === "en") return v;
        } catch {}
        return DEFAULT_LANG;
      }

      async function loadDict(lang: Lang): Promise<Dict> {
        const res = await fetch(`${LOCALES_BASE}/${lang}.json`, { cache: "no-store" });
        if (!res.ok) throw new Error("No se pudo cargar el diccionario " + lang);
        return res.json();
      }

     function applyTranslations(root = document) {
    // Texto / HTML
    root.querySelectorAll("[data-i18n]").forEach((el) => {
      const key = el.getAttribute("data-i18n");
      if (!key) return;
      const val = flatGet(DICT, key, el.textContent || key);

      // Si el nodo declara que acepta HTML, usar innerHTML
      if (el.hasAttribute("data-i18n-html")) {
        (el as HTMLElement).innerHTML = String(val ?? "");
      } else {
        el.textContent = String(val ?? "");
      }
    });

    // Atributos (placeholder, title, aria-label, etc.)
    root.querySelectorAll("[data-i18n-attr]").forEach((el) => {
      const list = (el.getAttribute("data-i18n-attr") || "")
        .split(",").map((s) => s.trim()).filter(Boolean);
      list.forEach((attr) => {
        const key = el.getAttribute(`data-i18n-${attr}`);
        if (!key) return;
        const v = flatGet(DICT, key);
        if (v != null) el.setAttribute(attr, String(v));
      });
    });
  }

      async function setLang(lang: Lang) {
        CURRENT_LANG = lang;
        try { localStorage.setItem(STORAGE_KEY, lang); } catch {}
        document.documentElement.setAttribute("lang", lang);
        document.documentElement.classList.toggle("lang-en", lang === "en");
        document.documentElement.classList.toggle("lang-es", lang === "es");
        DICT = await loadDict(lang);
        applyTranslations();
        window.dispatchEvent(new CustomEvent("rp:langchange", { detail: { lang } }));
      }

      (window as any).rpI18n = {
        setLang,
        getLang: () => CURRENT_LANG,
        t: (key: string, fallback?: string) => flatGet(DICT, key, fallback),
        apply: applyTranslations,
      };

      // ======= Init con loader =======
      (async () => {
        try {
          const initial = getSavedLang();
          await setLang(initial);
        } finally {
          // Mostrar contenido y ocultar loader
          document.documentElement.classList.remove("i18n-pending");
          document.documentElement.classList.add("i18n-ready");
          // (el CSS hará visible #app y desvanecerá #rp-loader)
        }
      })();
    </script>
  </body>
</html>
