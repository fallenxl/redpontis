---
import Footer from "../components/Footer.astro";
import Head from "../components/Head.astro";
import Navigation from "../components/Navigation.astro";
import "../styles/global.css";
---

<!doctype html>
<html lang="en" class="i18n-pending">
  <!-- flag inicial -->
  <Head />

  <body>
    <div id="rp-loader" aria-live="polite" aria-busy="true">
      <div class="flex items-center gap-2">
        <span class="dot"></span><span class="dot"></span><span class="dot"
        ></span>
      </div>
    </div>

    <div id="app">
      <Navigation />
      <slot />
      <Footer />
    </div>

    <script>
      // ======= i18n (igual al tuyo, con dos mejoras) =======
      type Lang = "es" | "en";
      type Dict = Record<string, any>;
      const STORAGE_KEY = "rp_lang";
      const DEFAULT_LANG: Lang = "es";
      const LOCALES_BASE = "/locale"; // cambia a "/locale" si así está tu carpeta
      let CURRENT_LANG: Lang = DEFAULT_LANG;
      let DICT: Dict = {};

      const flatGet = (obj: any, path: string, fallback?: string) =>
        path
          .split(".")
          .reduce(
            (acc: any, k) => (acc && acc[k] != null ? acc[k] : undefined),
            obj
          ) ??
        fallback ??
        path;

      function getSavedLang(): Lang {
        try {
          const v = localStorage.getItem(STORAGE_KEY);
          if (v === "es" || v === "en") return v;
        } catch {}
        return DEFAULT_LANG;
      }

      async function loadDict(lang: Lang): Promise<Dict> {
        const res = await fetch(`${LOCALES_BASE}/${lang}.json`, {
          cache: "no-store",
        });
        if (!res.ok)
          throw new Error("No se pudo cargar el diccionario " + lang);
        return res.json();
      }

      function applyTranslations(root = document) {
        root.querySelectorAll("[data-i18n]").forEach((el) => {
          const key = el.getAttribute("data-i18n");
          if (!key) return;
          const val = flatGet(DICT, key, el.textContent || key);

          // Si el nodo declara que acepta HTML, usar innerHTML
          if (el.hasAttribute("data-i18n-html")) {
            (el as HTMLElement).innerHTML = String(val ?? "");
          } else {
            el.textContent = String(val ?? "");
          }
        });

        // Atributos (placeholder, title, aria-label, etc.)
        root.querySelectorAll("[data-i18n-attr]").forEach((el) => {
          const list = (el.getAttribute("data-i18n-attr") || "")
            .split(",")
            .map((s) => s.trim())
            .filter(Boolean);
          list.forEach((attr) => {
            const key = el.getAttribute(`data-i18n-${attr}`);
            if (!key) return;
            const v = flatGet(DICT, key);
            if (v != null) el.setAttribute(attr, String(v));
          });
        });
      }

      async function setLang(lang: Lang) {
        CURRENT_LANG = lang;
        try {
          localStorage.setItem(STORAGE_KEY, lang);
        } catch {}
        document.documentElement.setAttribute("lang", lang);
        document.documentElement.classList.toggle("lang-en", lang === "en");
        document.documentElement.classList.toggle("lang-es", lang === "es");
        DICT = await loadDict(lang);
        applyTranslations();
        window.dispatchEvent(
          new CustomEvent("rp:langchange", { detail: { lang } })
        );
      }

      (window as any).rpI18n = {
        setLang,
        getLang: () => CURRENT_LANG,
        t: (key: string, fallback?: string) => flatGet(DICT, key, fallback),
        apply: applyTranslations,
      };

      (async () => {
        try {
          const initial = getSavedLang();
          await setLang(initial);
        } finally {
          document.documentElement.classList.remove("i18n-pending");
          document.documentElement.classList.add("i18n-ready");
        }
      })();
    </script>
  </body>
</html>
<style>
  .i18n-pending body #app {
    visibility: hidden;
  }
  #rp-loader {
    position: fixed;
    inset: 0;
    display: grid;
    place-items: center;
    background: #fff;
    z-index: 9999;
    transition: opacity 0.25s ease;
  }
  #rp-loader .dot {
    width: 10px;
    height: 10px;
    border-radius: 9999px;
    background: #b41a1d;
    animation: bounce 0.9s infinite ease-in-out;
  }
  #rp-loader .dot:nth-child(2) {
    animation-delay: 0.15s;
    background: #575756;
  }
  #rp-loader .dot:nth-child(3) {
    animation-delay: 0.3s;
  }
  @keyframes bounce {
    0%,
    80%,
    100% {
      transform: scale(0.6);
      opacity: 0.5;
    }
    40% {
      transform: scale(1);
      opacity: 1;
    }
  }
  .i18n-ready #rp-loader {
    opacity: 0;
    pointer-events: none;
  }
  body {
    margin: 0;
    width: 100%;
    min-height: 100%;
  }
</style>
