---
interface Props {
  defaultLang?: "es" | "en";
}
const { defaultLang = "es" } = Astro.props;
---

<div
  class="rp-lang-switcher relative"
  data-default-lang={defaultLang}
>
  <!-- Trigger: oculto en mobile, visible en desktop -->
  <button
    data-role="trigger"
    aria-haspopup="listbox"
    aria-expanded="false"
    class="hidden md:inline-flex min-w-24 justify-between items-center gap-2 rounded-xl border px-3 py-1.5 text-sm
           border-[#575756] text-[#575756] hover:bg-[#B41A1D]/10 hover:text-[#B41A1D] focus:outline-none focus:ring-2 focus:ring-[#B41A1D]/40"
  >
    <i class="fa-solid fa-globe" aria-hidden="true"></i>
    <span data-role="label" class="text-[#B41A1D] mx-auto">ES</span>
    <svg class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
      <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.17l3.71-3.94a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd" />
    </svg>
  </button>

  <!-- Menú: en mobile es segment control; en desktop es popover -->
  <ul
    data-role="menu"
    role="listbox"
    tabindex="-1"
    class="
      flex items-center gap-2 rounded-xl border border-[#575756] p-1 bg-white
      md:block md:absolute md:right-0 md:mt-2 md:w-40 md:rounded-xl md:border md:border-black/10 md:bg-white md:p-1 md:shadow-lg
      md:transition-all md:duration-150 md:origin-top md:invisible md:opacity-0 md:translate-y-1
    "
  >
    <li class="w-full">
      <button
        type="button"
        role="option"
        aria-selected="false"
        data-lang="es"
        class="w-full text-center rounded-lg px-3 py-2 text-sm
               text-[#575756] hover:bg-[#B41A1D]/10 hover:text-[#B41A1D] focus:outline-none"
      >
        Español
      </button>
    </li>
    <li class="w-full">
      <button
        type="button"
        role="option"
        aria-selected="false"
        data-lang="en"
        class="w-full text-center rounded-lg px-3 py-2 text-sm
               text-[#575756] hover:bg-[#B41A1D]/10 hover:text-[#B41A1D] focus:outline-none"
      >
       English
      </button>
    </li>
  </ul>
</div>

<script >
  // TS válido en Astro (sin type="module")
  (function () {
    const KEY = "rp_lang";
    type Lang = "es" | "en";

    const root = document.documentElement;
    const allSwitchers = Array.from(document.querySelectorAll<HTMLDivElement>(".rp-lang-switcher"));
    const mqDesktop = window.matchMedia("(min-width: 768px)");

    function getQueryLang(): Lang | null {
      try {
        const sp = new URLSearchParams(location.search);
        const q = (sp.get("lang") || "").toLowerCase();
        if (q === "es" || q === "en") return q;
      } catch {}
      return null;
    }

    function globalGetSaved(fallback: "es" | "en"): Lang {
      const q = getQueryLang();
      if (q) return q;
      try {
        const v = localStorage.getItem(KEY);
        if (v === "es" || v === "en") return v as Lang;
      } catch {}
      return (navigator.language || "").toLowerCase().startsWith("en") ? "en" : fallback;
    }

    function initOne(wrap: HTMLDivElement) {
      const label = wrap.querySelector<HTMLSpanElement>('[data-role="label"]');
      const btnTrigger = wrap.querySelector<HTMLButtonElement>('[data-role="trigger"]');
      const menu = wrap.querySelector<HTMLUListElement>('[data-role="menu"]');
      if (!menu) return;

      // lenguaje base por instancia (sirve como fallback si no hay localStorage)
      const fallback = (wrap.dataset.defaultLang === "en" ? "en" : "es") as Lang;

      function getSaved(): Lang {
        const q = getQueryLang();
        if (q) return q;
        try {
          const v = localStorage.getItem(KEY);
          if (v === "es" || v === "en") return v as Lang;
        } catch {}
        return fallback;
      }

      function styleActive(lang: Lang) {
        if (label) label.textContent = lang.toUpperCase();
        wrap.querySelectorAll<HTMLButtonElement>("[data-lang]").forEach((el) => {
          const isActive = el.dataset.lang === lang;
          el.setAttribute("aria-selected", String(isActive));
          el.setAttribute("aria-pressed", String(isActive));
          el.classList.toggle("bg-[#B41A1D]", isActive);
          el.classList.toggle("text-white", isActive);
          el.classList.toggle("border-[#B41A1D]", isActive);
          el.classList.toggle("text-[#575756]", !isActive);
        });
      }

      function setLang(lang: Lang) {
        try { localStorage.setItem(KEY, lang); } catch {}
        root.setAttribute("lang", lang);
        root.classList.toggle("lang-en", lang === "en");
        root.classList.toggle("lang-es", lang === "es");
        styleActive(lang);
        window.dispatchEvent(new CustomEvent("rp:langchange", { detail: { lang } }));
      }

      function toggleMenu(force?: boolean) {
        if (!btnTrigger || !menu) return;
        const open = force ?? menu.dataset.open !== "true";
        menu.dataset.open = String(open);
        btnTrigger.setAttribute("aria-expanded", String(open));
        // Solo afectamos visibilidad en desktop
        menu.classList.toggle("md:invisible", !open);
        menu.classList.toggle("md:opacity-0", !open);
        menu.classList.toggle("md:translate-y-1", !open);
      }

      // Init estilos según idioma global (compartido entre instancias)
      const initial = globalGetSaved(fallback);
      requestAnimationFrame(() => setLang(initial));

      // Click en opciones (sirve para mobile y desktop)
      menu.querySelectorAll<HTMLButtonElement>("[data-lang]").forEach((btn) => {
        btn.addEventListener("click", (e) => {
          e.preventDefault();
          e.stopPropagation();
          const lang = (btn.dataset.lang as Lang) || "es";
          if (globalGetSaved(fallback) !== lang) {
            setLang(lang);
            if (mqDesktop.matches) toggleMenu(false);
            location.reload();
          } else {
            styleActive(lang);
            if (mqDesktop.matches) toggleMenu(false);
          }
        });
      });

      // Toggle del popover (solo desktop)
      btnTrigger?.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        toggleMenu();
      });

      // Cerrar por click afuera / ESC (solo desktop)
      document.addEventListener("click", (e) => {
        if (!mqDesktop.matches) return;
        if (menu && !wrap.contains(e.target as Node)) toggleMenu(false);
      });
      document.addEventListener("keydown", (e) => {
        if (!mqDesktop.matches) return;
        if (e.key === "Escape") toggleMenu(false);
      });

      // Ajuste al cambiar breakpoint
      mqDesktop.addEventListener?.("change", () => {
        if (!mqDesktop.matches) {
          // En mobile: el menú es visible como segment control
          menu.classList.remove("md:invisible", "md:opacity-0", "md:translate-y-1");
          menu.dataset.open = "false";
          btnTrigger?.setAttribute("aria-expanded", "false");
        } else {
          // Desktop: asegúrate que arranque colapsado
          toggleMenu(false);
        }
      });
    }

    // Inicializa TODAS las instancias (desktop y mobile)
    allSwitchers.forEach(initOne);
  })();
</script>
