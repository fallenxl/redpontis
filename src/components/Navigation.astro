---
import { Image } from "astro:assets";
import LangSwitcher from "./LangSwitcher.astro";
import logo from "../assets/logo.png";

/** Helper activo por ruta (build-time) */
const currentPath = Astro.url.pathname;
const isActive = (p: string) =>
  currentPath === p || (p !== "/" && currentPath.startsWith(p));

/** Rutas estáticas (no cambian con el idioma) pero con claves i18n para el label */
type NavLink = { path: string; i18n: string };
const links: NavLink[] = [
  { path: "/",          i18n: "nav.home" },
  { path: "/nosotros",  i18n: "nav.about" },
  { path: "/fabrica",   i18n: "nav.factory" },
  { path: "/contacto",  i18n: "nav.contact" },
];
---

<header id="siteHeader" class="fixed top-0 z-50 w-full bg-white/80 backdrop-blur border-b border-neutral-200/60 py-2">
  <nav class="mx-auto max-w-7xl px-4 md:px-6">
    <div class="flex h-16 items-center justify-between gap-4">
      <!-- Logo -->
      <a href="/" class="flex items-center gap-3">
        <Image src={logo} alt="Red Pontis" class="h-14 w-auto select-none" />
        <span class="sr-only" data-i18n="brand.name">Red Pontis</span>
      </a>

      <!-- Desktop -->
      <div class="hidden md:flex items-center gap-4">
        <ul class="flex items-center gap-1 rounded-2xl bg-[#575756]/10 p-1">
          {links.map((l) => (
            <li>
              <a
                href={l.path}
                class={`block rounded-xl px-4 py-2 text-sm font-medium transition-colors ${
                  isActive(l.path)
                    ? "text-[#B41A1D] bg-[#B41A1D]/10"
                    : "text-[#575756] hover:text-[#B41A1D] hover:bg-[#B41A1D]/10"
                }`}
              >
                <span data-i18n={l.i18n}>Inicio</span>
              </a>
            </li>
          ))}
        </ul>

        <!-- Lang Switcher (desktop) -->
        <LangSwitcher />
      </div>

      <!-- Toggle Móvil -->
      <button
        id="menuToggle"
        aria-controls="mobileMenu"
        aria-expanded="false"
        class="md:hidden inline-flex items-center justify-center rounded-lg border border-[#575756]/30 px-3 py-2 text-[#575756] hover:bg-[#575756]/10 active:scale-95 transition"
      >
        <span class="sr-only" data-i18n="ui.openMenu">Abrir menú</span>
        <svg class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" aria-hidden="true">
          <path stroke-linecap="round" stroke-width="2" d="M4 7h16M4 12h16M4 17h16" />
        </svg>
      </button>
    </div>

    <!-- Menú Móvil -->
    <div id="mobileMenu" class="md:hidden origin-top scale-y-0 h-0 overflow-hidden">
      <div class="my-3 rounded-2xl border border-[#575756]/20 bg-white shadow-sm">
        <!-- Lang Switcher Mobile -->
        <div class="px-4 py-3 border-b border-[#575756]/10 flex justify-between items-center">
          <span class="text-sm text-[#575756]" data-i18n="ui.language">Idioma</span>
          <LangSwitcher />
        </div>

        <ul class="divide-y divide-[#575756]/10">
          {links.map((l) => (
            <li>
              <a
                href={l.path}
                class={`block px-4 py-3 text-[15px] font-medium transition-colors ${
                  isActive(l.path) ? "text-[#B41A1D]" : "text-[#575756] hover:text-[#B41A1D]"
                }`}
              >
                <span data-i18n={l.i18n}>Inicio</span>
              </a>
            </li>
          ))}
        </ul>
      </div>
    </div>
  </nav>
</header>

<script>
  import gsap from "gsap";

  const header = document.querySelector<HTMLElement>("#siteHeader")!;
  const menuToggle = document.querySelector<HTMLButtonElement>("#menuToggle")!;
  const mobileMenu = document.querySelector<HTMLDivElement>("#mobileMenu")!;

  // Sombra en scroll
  let lastY = 0;
  window.addEventListener("scroll", () => {
    const scrolled = window.scrollY > 8;
    if (scrolled && lastY <= 8) gsap.to(header, { duration: 0.25, boxShadow: "0 6px 24px rgba(0,0,0,0.08)" });
    else if (!scrolled && lastY > 8) gsap.to(header, { duration: 0.25, boxShadow: "0 0 0 rgba(0,0,0,0)" });
    lastY = window.scrollY;
  });

  // Menú móvil con animación
  let isOpen = false;
  const openMenu = () => {
    isOpen = true;
    menuToggle.setAttribute("aria-expanded", "true");
    gsap.set(mobileMenu, { height: "auto" });
    const h = mobileMenu.getBoundingClientRect().height;
    gsap.fromTo(
      mobileMenu,
      { height: 0, scaleY: 0.95, opacity: 0 },
      { height: h, scaleY: 1, opacity: 1, duration: 0.35, ease: "power2.out" }
    );
  };
  const closeMenu = () => {
    isOpen = false;
    menuToggle.setAttribute("aria-expanded", "false");
    gsap.to(mobileMenu, { height: 0, scaleY: 0.95, opacity: 0, duration: 0.28, ease: "power2.in" });
  };
  menuToggle.addEventListener("click", () => (isOpen ? closeMenu() : openMenu()));
  mobileMenu.addEventListener("click", (e: MouseEvent) => {
    const t = e.target as HTMLElement;
    if (t && t.closest("a")) closeMenu();
  });

  // Re-aplicar traducciones si cambia el idioma (por si se monta después)
  window.addEventListener("rp:langchange", () => {
    (window as any).rpI18n?.apply?.(document.getElementById("siteHeader")!);
  });
</script>
